/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './features/~__root'
import { Route as IndexImport } from './features/~index'
import { Route as StatisticsIndexImport } from './features/~statistics/~index'
import { Route as RequestIndexImport } from './features/~request/~index'
import { Route as HistoryIndexImport } from './features/~history/~index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StatisticsIndexRoute = StatisticsIndexImport.update({
  id: '/statistics/',
  path: '/statistics/',
  getParentRoute: () => rootRoute,
} as any)

const RequestIndexRoute = RequestIndexImport.update({
  id: '/request/',
  path: '/request/',
  getParentRoute: () => rootRoute,
} as any)

const HistoryIndexRoute = HistoryIndexImport.update({
  id: '/history/',
  path: '/history/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/history/': {
      id: '/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/request/': {
      id: '/request/'
      path: '/request'
      fullPath: '/request'
      preLoaderRoute: typeof RequestIndexImport
      parentRoute: typeof rootRoute
    }
    '/statistics/': {
      id: '/statistics/'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/history': typeof HistoryIndexRoute
  '/request': typeof RequestIndexRoute
  '/statistics': typeof StatisticsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/history': typeof HistoryIndexRoute
  '/request': typeof RequestIndexRoute
  '/statistics': typeof StatisticsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/history/': typeof HistoryIndexRoute
  '/request/': typeof RequestIndexRoute
  '/statistics/': typeof StatisticsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/history' | '/request' | '/statistics'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/history' | '/request' | '/statistics'
  id: '__root__' | '/' | '/history/' | '/request/' | '/statistics/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HistoryIndexRoute: typeof HistoryIndexRoute
  RequestIndexRoute: typeof RequestIndexRoute
  StatisticsIndexRoute: typeof StatisticsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HistoryIndexRoute: HistoryIndexRoute,
  RequestIndexRoute: RequestIndexRoute,
  StatisticsIndexRoute: StatisticsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/history/",
        "/request/",
        "/statistics/"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/history/": {
      "filePath": "~history/~index.tsx"
    },
    "/request/": {
      "filePath": "~request/~index.tsx"
    },
    "/statistics/": {
      "filePath": "~statistics/~index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
